#!/bin/bash
# shellcheck disable=SC2016

# win10: Win10_22H2_English_x64v1.iso
# win11: Win11_22H2_English_x64v2.iso

win_iso_filename="${WIN_ISO:-Win10_22H2_English_x64v1.iso}"

check_win_iso() {
    if [[ ! -e "iso/${win_iso_filename}" ]]; then
        echo "Windows iso file was not found. Download it manually."
        exit 1
    fi
}

check_or_download_virtio_iso() {
    if [[ ! -e iso/virtio-win.iso ]]; then
        echo "dist/virtio-win.iso was not found so download it."
        curl \
            -sL \
            -o iso/virtio-win.iso \
             https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso
    fi
}

create_iso() {
    TMP=$(mktemp -d)

    mkdir "${TMP}/mnt" "${TMP}/iso"

    sudo mount -o loop,ro "iso/${win_iso_filename}" "${TMP}/mnt"
    cp -r "${TMP}"/mnt/* "${TMP}/iso/"
    sudo umount "${TMP}/mnt"

    chmod +w -R "${TMP}/iso"

    cp autounattend.xml "${TMP}/iso/"

    # Run shell script when users log on for the first time
    mkdir -p "${TMP}"'/iso/sources/$OEM$/$1/Windows/Setup/Scripts'
    cp post.ps1 "${TMP}"'/iso/sources/$OEM$/$1/Windows/Setup/Scripts/'
    echo "copy C:\Windows\Setup\Scripts\post.ps1 C:\Users\root\Desktop\post.ps1" > "${TMP}"'/iso/sources/$OEM$/$1/Windows/Setup/Scripts/UserFirstLogon.cmd'

    genisoimage \
        -b boot/etfsboot.com \
        -no-emul-boot \
        -boot-load-seg 1984 \
        -boot-load-size 8 \
        -iso-level 2 \
        -J \
        -l \
        -D \
        -N \
        -input-charset iso8859-1 \
        -joliet-long \
        -allow-limited-size \
        -relaxed-filenames \
        -quiet \
        -o output.iso \
        "${TMP}/iso"

    sudo rm -fr "${TMP}/"
}

create_vm() {
    name_prefix="${NAME_PREFIX:-win10}"
    name_suffix="$(date +%Y-%m-%d-%H%M%S)"
    vm_name="${name_prefix}-${name_suffix}"
    vcpus="${VCPUS:-8}"
    ram_size="${RAM:-12000}"
    disk_size="${DISK_SIZE:-60}"

    virt-install \
        --connect qemu:///system \
        --name "${vm_name}" \
        --ram "${ram_size}" \
        --disk "size=${disk_size},format=qcow2" \
        --vcpus "${vcpus}" \
        --osinfo name=win10 \
        --cdrom output.iso \
        --disk iso/virtio-win.iso,device=cdrom,target.bus=sata

    rm -f output.iso
    # Detach Windows ISO
    virsh detach-disk --domain "${vm_name}" --target sdb --config

    # Detach virtio-win.iso
    virsh detach-disk --domain "${vm_name}" --target sdc --config
}

check_win_iso
check_or_download_virtio_iso
create_iso
create_vm
